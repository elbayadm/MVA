p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*gaussian(x,mu[k,],sigma[[k]])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*gaussian(x,mu[k,],sigma[[k]]))))
}
list(ll=ll)
}
llkh(kdata,EMG3)
llkh<-function(X,EMG){
n=nrow(X)
K=nrow(EMG$mu)
tau=matrix(nrow=K, ncol=n)
mu=EMG$mu
p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*gaussian(x,mu[k,],sigma[[k]])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*gaussian(x,mu[k,],sigma[[k]]))))
}
return(ll)
}
llkh(kdata,EMG3)
ll_isoEMG<-function(X,EMG){
n=nrow(X)
K=nrow(EMG$mu)
tau=matrix(nrow=K, ncol=n)
mu=EMG$mu
p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*gaussian(x,mu[k,],sigma[k]))))
}
return(ll)
}
EMG3=EMG_iso(kdata,3)
ll_isoEMG(kdata,EMG3)
ll_isoEMG<-function(X,EMG){
n=nrow(X)
K=nrow(EMG$mu)
tau=matrix(nrow=K, ncol=n)
mu=EMG$mu
p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
return(ll)
}
ll_isoEMG(kdata,EMG3)
ll_EMG<-function(X,EMG){
n=nrow(X)
K=nrow(EMG$mu)
tau=matrix(nrow=K, ncol=n)
mu=EMG$mu
p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*gaussian(x,mu[k,],sigma[[k]])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*gaussian(x,mu[k,],sigma[[k]]))))
}
return(ll)
}
ll_isoEMG<-function(X,EMG){
n=nrow(X)
K=nrow(EMG$mu)
tau=matrix(nrow=K, ncol=n)
mu=EMG$mu
p=EMG$p
sigma=EMG$sigma
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
affect=apply(tau,2,which.max)
ll=0
for (k in 1:K) {
ll=ll+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
return(ll)
}
kdata_test=as.matrix(read.table("data/EMGaussian.test",header=F,sep=' ',col.names=c('X','Y')));
ll_tain_iso=EMG3_iso$likelihood[EMG3_iso$iter]
EMG3_iso=EMG_iso(kdata,3)
ll_tain_iso=EMG3_iso$likelihood[EMG3_iso$iter]
ll_test_iso=ll_isoEMG(kdata_test,EMG3_iso)
ll_train=EMG3$likelihood[EMG3$iter]
ll_test=ll_EMG(kdata_test,EMG3)
EMG3=EMG(kdata,3)
ll_train=EMG3$likelihood[EMG3$iter]
ll_test=ll_EMG(kdata_test,EMG3)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_tain_iso,ll_test_iso)
recap[2,]=c("GM",ll_tain,ll_test)
ll_train_iso=EMG3_iso$likelihood[EMG3_iso$iter]
ll_test_iso=ll_isoEMG(kdata_test,EMG3_iso)
ll_train=EMG3$likelihood[EMG3$iter]
ll_test=ll_EMG(kdata_test,EMG3)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[2,]=c("GM",ll_train,ll_test)
recap
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
recap
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
print(xtable(recap,include.rownames=F,include.colnames=FALSE), file="recap.tex", floating=FALSE)
library(xtable)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
print(xtable(recap,include.rownames=F,include.colnames=FALSE), file="recap.tex", floating=FALSE)
print(xtable(recap),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
print(xtable(recap,digits=c(0,2,2)),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
print(xtable(recap,digits=c(0,0,2,2)),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
print(xtable(recap,digits=3),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
print(xtable(recap,round=3),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
print(xtable(recap),digits=3,include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
ll_train_iso=round(EMG3_iso$likelihood[EMG3_iso$iter],3)
ll_test_iso=round(ll_isoEMG(kdata_test,EMG3_iso),3)
ll_train=round(EMG3$likelihood[EMG3$iter],3)
ll_test=round(ll_EMG(kdata_test,EMG3),3)
recap=matrix(nr=3,nc=3)
recap[1,]=c("","Train","Test")
recap[2,]=c("Isotropic GM",ll_train_iso,ll_test_iso)
recap[3,]=c("GM",ll_train,ll_test)
print(xtable(recap),include.rownames=F,include.colnames=FALSE, file="recap.tex", floating=FALSE)
EMG_iso<-function(X,K,max_iter=300,tol=1e-5){
#X: data sample -  K: Number of gaussians - max_iter: maximum number of EM iterations.
#tol: Convergence tolerance.
#Initialization with kmeans:
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
#Convergence criteria
ll=rep(0,max_iter)
delta=+Inf
#EM loop
iter=1
while(iter<max_iter && delta>tol){
#(E-step):
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
#(M-step):
p.old=p
p=rowMeans(tau)
delta=sum(abs(p-p.old))
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
#Compute the log-likelihood:
counts=rep(0,K)
for (k in 1:K) {
counts[k]=sum(affect==k)
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
else
delta=+Inf
iter=iter+1
}
if(iter>=max_iter) warning('EM algorithm didn\'t converge')
list(p=p,sigma=sigma,mu=mu,likelihood=ll[1:iter-1],km=km,iter=iter-1,affect=affect)
}
EMG_iso_plot<-function(EMG,X,affect,s=""){
K=nrow(EMG$mu)
plot(c(),xlim=range(X),ylim=range(X),
main=paste('Isotropic GM: K=',K,s),xlab='X',ylab='Y')
for(k in 1:K){
points(X[affect==k,],col=colors[k],pch=19,cex=.4)
for(o in c(.1 ,.3 ,.7)){
temp=ellipse(mu=EMG$mu[k,], sigma=EMG$sigma[k]*diag(1,2),alpha=o,col="gray40",pch=19,cex=.4,lty=2)
text(t(temp[100,]),paste((1-o)*100,"%"),cex=.6,col='gray20')
}
}
points(EMG$mu,col='red',pch=10,cex=1.5,lwd=1.5)
legend('topleft',legend=c('GM centroids',paste('C',1:K,sep="")),cex=.7,pch=c(10,rep(19,K)),col=c('red',colors[1:K]))
}
set.seed(11)
EMG3_iso=EMG_iso(kdata,4)
K=4
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
X=kdata
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
ll=rep(0,max_iter)
delta=+Inf
iter=1
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
p=rowMeans(tau)
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
for (k in 1:K) {
counts[k]=sum(affect==k)
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
iter=iter+1
EMG_iso<-function(X,K,max_iter=300,tol=1e-5){
#X: data sample -  K: Number of gaussians - max_iter: maximum number of EM iterations.
#tol: Convergence tolerance.
#Initialization with kmeans:
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
#Convergence criteria
ll=rep(0,max_iter)
delta=+Inf
#EM loop
iter=1
while(iter<max_iter && delta>tol){
#(E-step):
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
#(M-step):
p=rowMeans(tau)
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
#Compute the log-likelihood:
for (k in 1:K) {
counts[k]=sum(affect==k)
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
else
delta=+Inf
iter=iter+1
}
if(iter>=max_iter) warning('EM algorithm didn\'t converge')
list(p=p,sigma=sigma,mu=mu,likelihood=ll[1:iter-1],km=km,iter=iter-1,affect=affect)
}
EMG_iso_plot<-function(EMG,X,affect,s=""){
EMG3_iso=EMG_iso(kdata,4)
kmeans<- function(X,K,max_iter=300,tol=1e-5){
#X: data sample.
#K: Number of clusters
#max_iter: maximum number of iterations.
#tol: Convergence tolerance.
#Initialization of the clusers centers:
centers=X[sample(nrow(X), K), ]
counts=rep(0,K)
sd=rep(0,K)
initials=centers
distances=matrix(rep(0,nrow(X)*K),nc=K)
iter=1
delta=+Inf
distortion=rep(NaN,max_iter)
while(iter < max_iter && delta>tol){
#Affectation
for (c in 1:K){
distances[,c]=apply(X,1,function(x) sum((x-centers[c,])^2))
}
affect=apply( distances, 1, which.min)
#Distortion measure:
distortion[iter]=0
for (c in 1:K){
distortion[iter]=distortion[iter]+sum(distances[,c]*(affect==c))
}
if(iter>1) delta=distortion[iter-1]-distortion[iter]
#update centers:
for (c in 1:K){
centers[c,]=colMeans(kdata[affect==c,])
}
iter=iter+1
}
for (c in 1:K) counts[c]=sum(affect==c)
list(initials=initials,affect=affect,centers=centers,distortion=distortion,cv=iter-1,counts=counts)
}
kmeans(kdata,4)
EMG_iso<-function(X,K,max_iter=300,tol=1e-5){
#X: data sample -  K: Number of gaussians - max_iter: maximum number of EM iterations.
#tol: Convergence tolerance.
#Initialization with kmeans:
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
#Convergence criteria
ll=rep(0,max_iter)
delta=+Inf
#EM loop
iter=1
while(iter<max_iter && delta>tol){
#(E-step):
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
#(M-step):
p=rowMeans(tau)
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
#Compute the log-likelihood:
for (k in 1:K) {
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
else
delta=+Inf
iter=iter+1
}
if(iter>=max_iter) warning('EM algorithm didn\'t converge')
list(p=p,sigma=sigma,mu=mu,likelihood=ll[1:iter-1],km=km,iter=iter-1,affect=affect)
}
EMG3_iso=EMG_iso(kdata,4)
X=kdata
K=4
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
ll=rep(0,max_iter)
delta=+Inf
iter=1
while(iter<max_iter && delta>tol){
#(E-step):
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
#(M-step):
p=rowMeans(tau)
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
for (k in 1:K) {
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
else
delta=+Inf
iter=iter+1
}
affect=apply(tau,2,which.max)
k
X[affect==k,]
nrow(X[affect==k,])
sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
X[affect==k,]
dim(X[affect==k,])
affect
X[affect==4,]
length( X[affect==4,])
dim( X[affect==4,])
dim( X[affect==3,])
p[k]*iso_gaussian(X[affect==k,],mu[k,],sigma[k])
p[k]*iso_gaussian(X[affect==5,],mu[k,],sigma[k])
X[affect==5,]
length(X[affect==5,])
EMG_iso<-function(X,K,max_iter=300,tol=1e-5){
#X: data sample -  K: Number of gaussians - max_iter: maximum number of EM iterations.
#tol: Convergence tolerance.
#Initialization with kmeans:
km=kmeans(X,K)
p=km$counts/nrow(X)
mu=km$centers
sigma=rep(max(var(X)),K) #Initializing with a large variance
n=nrow(X)
d=ncol(X)
tau=matrix(nrow=K, ncol=n)
#Convergence criteria
ll=rep(0,max_iter)
delta=+Inf
#EM loop
iter=1
while(iter<max_iter && delta>tol){
#(E-step):
for(k in 1:K){
tau[k,]=as.matrix(apply(X,1,function(x) p[k]*iso_gaussian(x,mu[k,],sigma[k])))
}
tau=t(t(tau)/colSums(tau))
#(M-step):
p=rowMeans(tau)
mu=(tau%*%X)/rowSums(tau)
for(k in 1:K){
temp=rowSums(t(apply(X,1,function(x) x-mu[k,]))^2)
sigma[k]=sqrt(sum(tau[k,]*temp)/sum(tau[k,])/d)
}
affect=apply(tau,2,which.max)
#Compute the log-likelihood:
for (k in 1:K) {
if(length(X[affect==k,])<2)
next
else{
if(length(X[affect==k,])==2)
ll[iter]=ll[iter]+p[k]*iso_gaussian(X[affect==k,],mu[k,],sigma[k])
else
ll[iter]=ll[iter]+sum(as.matrix(apply(X[affect==k,],1,function(x)
p[k]*iso_gaussian(x,mu[k,],sigma[k]))))
}
}
if(iter>1)
delta=abs(ll[iter]-ll[iter-1])
else
delta=+Inf
iter=iter+1
}
if(iter>=max_iter) warning('EM algorithm didn\'t converge')
list(p=p,sigma=sigma,mu=mu,likelihood=ll[1:iter-1],km=km,iter=iter-1,affect=affect)
}
EMG3_iso=EMG_iso(kdata,4)
